# coding=utf-8
import sys
from datetime import date, timedelta

from django.conf import settings
from django.views.generic.base import TemplateView
from django.forms.models import model_to_dict
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.core.mail import send_mail
from django.template.loader import get_template

from customers.models import Customer
from destinations.models import Country, City
from library.utils import ml
from main_database_models.models import School

from .forms import CustomerForm, BudgetRequestForm


class BudgetRequestView(TemplateView):
    template_name = 'budget_request/budget-request.html'
    
	def post(self, request, *args, **kwargs):
		context = self.get_context_data(**kwargs)
        
		if context['customer_form'].is_valid() and context['budget_request_form'].is_valid():
               
            #customer = context['customer_form'].save(commit=False)
            customer = context['customer_form'].save(commit=False)
            budget_request = context['budget_request_form'].save(commit=False)
            
            customer.first_contact = 'BUDGET_REQUEST'
            customer.referrer = context['budget_request_form'].cleaned_data['referrer']
            
            try:
                # check if this customer already exists in the db.
                existing_customer = Customer.objects.get(email__iexact=customer.email)
                existing_customer_dict = model_to_dict(existing_customer)
                customer_dict = model_to_dict(customer)
                
                for key in existing_customer_dict:
                    if not existing_customer_dict[key] and customer_dict[key]:
                        existing_customer_dict[key] = customer_dict[key]
                
                Customer.objects.filter(email__iexact=customer.email).update(**existing_customer_dict)
                customer = Customer.objects.get(email__iexact=customer.email)
            except Customer.DoesNotExist:
                pass
            
            customer.save()
            
            budget_request.customer = customer
            
            budget_request.save()
            budget_request.customer.history_log(action='C',related_obj=budget_request)
            
            for destination in context['budget_request_form'].cleaned_data['to_find']:
                if 'school-' in destination:
                    # busco escuela y guardo school, city y country en budget_request
                    school = School.objects.get(id=destination[7:])
                    budget_request.schools.add(school)
                
                if 'city-' in destination:
                    city = City.objects.get(id=destination[5:])
                    budget_request.cities.add(city)
                
                if 'country-' in destination:
                    country = Country.objects.get(id=destination[8:])
                    budget_request.countries.add(country)
            
            task_suggestion_date = (date.today()+timedelta(days=2)).strftime('%Y-%m-%d')
            task_suggestion_kwargs = {'customer': customer.pk, 'type': 1, 'title': 'Send PDF offer to customer for budget request', 'deadline': task_suggestion_date}
            
            mail_context_dict = {
                'customer': customer,
                'budget_request': budget_request,
                'task_suggestion_kwargs': task_suggestion_kwargs
            }
            
            mail_context = RequestContext(request, mail_context_dict)
            mail_template = get_template('budget_request/budget-email.html')
            mail_message = mail_template.render(mail_context)
            mail_subject = 'Budget request for ' + customer.first_name + ' ' + customer.last_name + ', from ' + customer.country
            send_mail(mail_subject, mail_message, customer.email, ['info@yalea.com', 'logs@lingua-group.org'], settings.EMAIL_FAIL_SILENTLY)
            
            return render_to_response('budget_request/budget-request-success.html', {'customer': customer}, context_instance=RequestContext(self.request))
        
        return self.render_to_response(context)
    
    def get_context_data(self, **kwargs):
        form_kwargs = {}
        
        if 'country_slug' in self.kwargs and 'language_slug' in self.kwargs:
            if 'city_slug' in self.kwargs:
                if 'school_slug' in self.kwargs:
                    school = School.objects.get(**ml(slug=self.kwargs['school_slug'], city__slug=self.kwargs['city_slug'], city__country__slug=self.kwargs['country_slug'] , city__country__language__slug=self.kwargs['language_slug']))
                    form_kwargs['initial'] = {'to_find': 'school-%d'%school.id}
                    #obtengo school
                    pass
                else:
                    #obtengo city
                    city = City.objects.get(**ml(slug=self.kwargs['city_slug'], country__slug=self.kwargs['country_slug'] , country__language__slug=self.kwargs['language_slug']))
                    form_kwargs['initial'] = {'to_find': 'city-%d'%city.id}
                    pass
            else:
                country = Country.objects.get(**ml(slug=self.kwargs['country_slug'], language__slug=self.kwargs['language_slug']))
                form_kwargs['initial'] = {'to_find': 'country-'+country.id}
        
        kwargs = super(BudgetRequestView, self).get_context_data(**kwargs)
        
        
        if self.request.method == 'POST':
            form_kwargs['data'] = self.request.POST
        
        customer_form = CustomerForm(prefix='customer', **form_kwargs)
        budget_request_form = BudgetRequestForm(prefix='budget', **form_kwargs)
        
        kwargs['customer_form'] = customer_form
        kwargs['budget_request_form'] = budget_request_form
        
        return kwargs